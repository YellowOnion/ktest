#!/bin/bash

require-lib bcachefs-test-libs.sh

config-scratch-devs 4G
config-scratch-devs 4G

config-timeout $(stress_timeout)

test_journal_resize()
{
    run_quiet "" bcachefs format -f /dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    run_fio_randrw --filesize=2G &

    sleep 4
    bcachefs device resize-journal /dev/sdb 1G

    wait
    umount /mnt
}

test_reflink_inline_data()
{
    run_quiet "" bcachefs format -f /dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/urandom of=/root/foo bs=256 count=1
    cp		    /root/foo /mnt/foo1
    cp		    /mnt/foo1 /mnt/foo2
    cp --reflink    /mnt/foo2 /mnt/foo3
    md5sum /root/foo /mnt/foo*

    umount /mnt
}

test_split_compressed()
{
    run_quiet "" bcachefs format --compression=zstd /dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    # Test that splitting of compressed extents is working correctly:
    dd if=/dev/zero of=/mnt/foo bs=128k	    count=1 oflag=direct
    dd if=/dev/urandom of=/mnt/foo bs=4k    count=1 seek=1 oflag=direct conv=notrunc
    umount /mnt
}

test_remount_loop()
{
    run_quiet "" bcachefs format /dev/sdb

    while true; do
	mount -t bcachefs -o fsck /dev/sdb /mnt
	run_fio_randrw
	umount /mnt
    done
}

test_fcollapse()
{
    run_quiet "" bcachefs format /dev/sdb
    mount -t bcachefs -o fsck /dev/sdb /mnt

    dd if=/dev/zero of=/mnt/foo bs=64k count=1 oflag=direct

    cat /sys/kernel/debug/bcachefs/*/extents

    xfs_io -c "fcollapse 0 1024" /mnt/foo
}

test_finsert()
{
    run_quiet "" bcachefs format /dev/sdb
    mount -t bcachefs -o fsck /dev/sdb /mnt

    dd if=/dev/zero of=/mnt/foo bs=64k count=1 oflag=direct

    cat /sys/kernel/debug/bcachefs/*/extents

    xfs_io -c "finsert 1024 1024" /mnt/foo
}

test_key_merge()
{
    run_quiet "" bcachefs format --data_checksum=none /dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/zero of=/mnt/foo bs=8k count=128 oflag=direct

    NR=$(cat /sys/kernel/debug/bcachefs/*/extents|wc -l)

    [[ $NR -eq 4 ]]

    umount /mnt
}

test_key_merge_csum()
{
    run_quiet "" bcachefs format --data_checksum=crc32c /dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/urandom of=/mnt/foo bs=8k count=128 oflag=direct

    cat /mnt/foo > /dev/null

    NR=$(cat /sys/kernel/debug/bcachefs/*/extents|wc -l)

    [[ $NR -le 16 ]]

    umount /mnt
}

test_reflink()
{
    bcachefs_antagonist
    run_quiet "" bcachefs format /dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/urandom of=/mnt/foo bs=8k count=1 oflag=direct
    md5sum /mnt/foo

    cp --reflink /mnt/foo /mnt/bar
    md5sum /mnt/foo
    md5sum /mnt/bar

    #dd if=/dev/urandom of=/mnt/foo bs=8k count=1 oflag=sync
    #dd if=/dev/urandom of=/mnt/bar bs=8k count=1 oflag=sync
    #umount /mnt
}

test_reconstruct_alloc()
{
    run_quiet "" bcachefs format --btree_node_size=16k /dev/sdb

    mount -t bcachefs -o reconstruct_alloc,fix_errors,fsck /dev/sdb /mnt

    umount /mnt
    bcachefs fsck -n /dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    run_fio_randrw
    umount /mnt

    mount -t bcachefs -o reconstruct_alloc,fix_errors,fsck /dev/sdb /mnt
    umount /mnt

    bcachefs fsck -n /dev/sdb
    mount -t bcachefs -o fsck /dev/sdb /mnt
    umount /mnt
}

test_recovery()
{
    run_quiet "" bcachefs format		\
	--encrypted --no_passphrase		\
	--bucket=8k				\
	/dev/sdb

    for i in `seq 0 1`; do
	mount -t bcachefs /dev/sdb /mnt

	dd if=/dev/zero of=/mnt/foo bs=4k count=8 oflag=direct

	dd if=/dev/zero of=/mnt/foo bs=4k count=8 oflag=direct
	sync

	#run_fio_randrw
	#fio --eta=always			\
	#    --exitall_on_error=1		\
	#    --randrepeat=0			\
	#    --ioengine=libaio			\
	#    --iodepth=64			\
	#    --iodepth_batch=16			\
	#    --direct=1				\
	#    --numjobs=1				\
	#    --filename=/mnt/fiotest		\
	#    --filesize=15M			\
	#    --name=randwrite			\
	#    --rw=randwrite			\
	#    --bsrange=4k-8k

	$ktest_dir/tests/xfstests/src/godown -f /mnt

	umount /mnt
    done
}

test_lz4()
{
    run_basic_fio_test				\
	--compression=lz4			\
	/dev/sdb
}

test_lz4_buffered()
{
    #bcachefs_antagonist
    antagonist_trigger_gc &
    echo 1 > /sys/module/bcachefs/parameters/debug_check_bkeys

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--compression=lz4			\
	/dev/sdb
    mount /dev/sdb /mnt

    while true; do
	echo starting copy
	cp -rx / /mnt

	echo starting sync 
	sync

	#echo starting gc 
	#echo 1 | tee /sys/fs/bcachefs/*/internal/trigger_gc >& /dev/null || true

	echo starting rm
	rm -rf /mnt/*
    done

    umount /mnt
}

test_gzip()
{
    run_basic_fio_test				\
	--compression=gzip			\
	/dev/sdb
}

test_zstd()
{
    run_basic_fio_test				\
	--compression=zstd			\
	/dev/sdb
}

disabled_test_background_compression()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--background_compression=zstd	    	\
	/dev/sdb
    mount /dev/sdb /mnt
    echo zstd > /sys/fs/bcachefs/*/options/background_compression
    run_fio_randrw
}

test_compress_no_checksum()
{
    run_basic_fio_test				\
	--compression=lz4			\
	--metadata_checksum=none	    	\
	--data_checksum=none			\
	/dev/sdb
}

test_no_checksum()
{
    run_basic_fio_test				\
	--metadata_checksum=none		\
	--data_checksum=none			\
	/dev/sdb
}

test_crc32c()
{
    run_basic_fio_test				\
	--metadata_checksum=crc32c		\
	--data_checksum=crc32c			\
	/dev/sdb
}

test_crc64()
{
    run_basic_fio_test				\
	--metadata_checksum=crc64		\
	--data_checksum=crc64			\
	/dev/sdb
}

test_crypto_locked_mnt()
{
    echo foo|bcachefs format --encrypted /dev/sdb
    mount -t bcachefs -o verbose /dev/sdb /mnt
    umount /mnt
    bcachefs fsck				\
	/dev/sdb
}

test_crypto()
{
    run_basic_fio_test				\
	--encrypted --no_passphrase		\
	/dev/sdb
    mount -t bcachefs -o fsck /dev/sdb /mnt
    umount /mnt
    bcachefs fsck				\
	/dev/sdb
}

test_crypto_lz4()
{
    run_basic_fio_test				\
	--encrypted --no_passphrase		\
	--compression=lz4			\
	/dev/sdb
}

run_copygc_torture()
{
    loops=$((($ktest_priority + 1) * 4))

    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	"$@" /dev/sdb

    mount /dev/sdb /mnt
    #enable_memory_faults

    fill_device /mnt/fiotest

    for i in $(seq 1 $loops); do
	run_fio_base				\
	    --buffer_compress_percentage=50	\
						\
	    --name=randwrite			\
	    --stonewall				\
	    --rw=randwrite			\
	    --loops=$loops			\
	    --bsrange=4k-4k

	cur_size=$(stat -c '%s' /mnt/fiotest)
	new_size=$(($cur_size - 1048576))
	echo "truncating to $new_size"

	truncate --size=$new_size /mnt/fiotest
    done

    rm /mnt/fiotest

    expect_sysfs cache dirty_buckets	0
    expect_sysfs cache dirty_data	0
    expect_sysfs cache cached_buckets	0
    expect_sysfs cache cached_data	0

    #disable_memory_faults
    umount /mnt
}

test_copygc_torture()
{
    #run_copygc_torture --bucket=256k --btree_node_size=8k
    run_copygc_torture --bucket=32k --btree_node_size=32k
}

test_copygc_torture_no_checksum()
{
    run_copygc_torture --bucket=256k --btree_node_size=16k --data_checksum=none
}

test_copygc_torture_lz4()
{
    run_copygc_torture --bucket=256k --btree_node_size=16k --compression=lz4
}

test_small_buckets()
{
    run_basic_fio_test				\
	--bucket=4k				\
	/dev/sdb
}

test_small_nodes()
{
    run_basic_fio_test				\
	--bucket=256k				\
	--btree_node_size=4k			\
	/dev/sdb
}

test_crypto_passphrase()
{
    bcachefs_antagonist

    echo ""|bcachefs format -f --encrypted /dev/sdb
    echo ""|bcachefs unlock /dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    umount /mnt
    bcachefs fsck /dev/sdb
}

test_partial_overwritten_extents()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--encrypted --no_passphrase		\
	/dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/urandom	of=/mnt/foo  bs=32k  count=1 skip=0 oflag=direct
    dd if=/mnt/foo	of=/dev/null bs=4k   count=8 skip=0 iflag=direct

    dd if=/dev/urandom	of=/mnt/foo  bs=32k  count=1 skip=0 oflag=direct
    dd if=/dev/zero	of=/mnt/foo  bs=4k   count=1 skip=0 oflag=direct conv=notrunc
    dd if=/mnt/foo	of=/dev/null bs=4k   count=8 skip=0 iflag=direct

    dd if=/dev/urandom	of=/mnt/bar  bs=32k  count=1 skip=0 oflag=direct
    dd if=/dev/zero	of=/mnt/bar  bs=4k   count=1 skip=7 oflag=direct conv=notrunc
    dd if=/mnt/bar	of=/dev/null bs=4k   count=8 skip=0 iflag=direct > /dev/null

    dd if=/dev/urandom	of=/mnt/baz  bs=32k  count=1 skip=0 oflag=direct
    dd if=/dev/zero	of=/mnt/baz  bs=4k   count=1 skip=0 oflag=direct conv=notrunc
    dd if=/dev/zero	of=/mnt/baz  bs=4k   count=1 skip=7 oflag=direct conv=notrunc
    dd if=/mnt/baz	of=/dev/null bs=4k   count=8 skip=0 iflag=direct > /dev/null
    umount /mnt
}

# test the xattr interface for per-inode IO options:
test_xattr()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    mkdir /mnt/foo
    setfattr -n bcachefs.compression -v lz4 /mnt/foo
    getfattr -n bcachefs.compression /mnt/foo

    echo "checking xattr propagation to children"
    touch /mnt/foo/bar
    getfattr -n bcachefs_effective.compression /mnt/foo/bar

    echo "checking xattr deletion"
    setfattr -x bcachefs.compression /mnt/foo/bar
    #getfattr -n bcachefs.compression /mnt/foo/bar

    rsync -rX /mnt/foo/ /mnt/baz

    getfattr -R -m - -d /mnt

    umount /mnt
}

test_quota()
{
    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount -o usrquota,grpquota,prjquota /dev/sdb /mnt

    loops=$((($ktest_priority + 1) * 4))

    run_fio_randrw

    rm /mnt/fiotest
    umount /mnt
}

# test nfs exports:
require-kernel-config NFSD
require-kernel-config NFSD_V3
require-kernel-config NFSD_V4

test_nfs()
{
    mkdir /export1 /export2

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount /dev/sdb /export2

    echo "/export1  *(ro,insecure,all_squash,no_subtree_check)" >> /etc/exports
    echo "/export2  *(ro,insecure,all_squash,no_subtree_check)" >> /etc/exports
    exportfs -a
    exportfs -ua

    umount /export2
}

test_suspend()
{
    umount $LOGDIR

    #setup_tracing 'bcachefs:*'

    (
	p="/sys/power"

	sleep 10
	echo freezer	> $p/pm_test
	echo freeze	> $p/state

	#echo 1 > /sys/fs/bcachefs/suspend
	#s2ram --no_kms --force
    )&

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount /dev/sdb /mnt

    if false; then
	run_dbench
    else
	run_antagonist
	run_stress
    fi
}

require-kernel-config MD,BLK_DEV_DM,DM_LOG_WRITES
test_writelog()
{
    cd $LOGDIR
    ln -s $LOGDIR/log-writes/replay-log /usr/bin

    dmsetup create log --table "0 $(blockdev --getsz /dev/sdb) log-writes /dev/sdb /dev/sdc"

    bcachefs format -f --btree_node_size=16k --errors=panic /dev/mapper/log
    dmsetup message log 0 mark mkfs

    mount /dev/mapper/log /mnt
    fs_mark -v -n 10000 -s 4096 -k -S 0 -D  1000 -N 1000 -d /mnt -t 10
    umount /mnt

    dmsetup remove log

    nr_entries=$(replay-log --log /dev/sdc|cut -d= -f4)
    nr_flush=$(replay-log --log /dev/sdc --list --start-mark mkfs --next-flush --next-fua|wc -l)
    echo "Replaying $nr_flush/$nr_entries entries:"

    dd if=/dev/zero of=/dev/sdb 2>/dev/null || true

    prev=0
    for e in $(replay-log --log /dev/sdc --list --start-mark mkfs --next-flush --next-fua); do
	echo "testing entry $e"

	replay-log --log /dev/sdc --replay /dev/sdb --start $prev --limit $(( $e - $prev + 1))
	prev=$(( $e + 1 ))

	dmsetup create snap --table "0 $(blockdev --getsz /dev/sdb) snapshot /dev/sdb /dev/sdd N 8"
	mount -o ro /dev/mapper/snap /mnt
	umount /mnt
	dmsetup remove snap
    done
}

test_journal_torture()
{
    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    #enable_memory_faults

    echo 0 > /sys/fs/bcachefs/*/journal_write_delay_ms

    run_fio_randrw

    #disable_memory_faults
    umount /mnt
}

test_online_resize()
{
    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--fs_size=1G				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    df -h /mnt
    bcachefs device resize /dev/sdb
    df -h /mnt

    umount /mnt
}

test_offline_resize()
{
    bcachefs_antagonist

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--fs_size=1G				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    df -h /mnt
    cat /proc/mounts

    umount /mnt

    bcachefs device resize /dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    df -h /mnt
    umount /mnt
}

test_offline_resize_lv()
{
    pvcreate /dev/sdb
    vgcreate vg /dev/sdb
    lvcreate -L 1G -n foo  vg
    dev=/dev/vg/foo

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	$dev

    mount -t bcachefs $dev /mnt
    df -h /mnt
    cat /proc/mounts

    lvresize -L +1G $dev
    bcachefs device resize $dev
    df -h /mnt
    umount /mnt

    mount -t bcachefs $dev /mnt
    df -h /mnt
    umount /mnt

    vgremove -f vg
}

test_offline_resize_lv_ext4()
{
    pvcreate /dev/sdb
    vgcreate vg /dev/sdb
    lvcreate -L 1G -n foo  vg
    dev=/dev/vg/foo

    mkfs.ext4 $dev

    mount  $dev /mnt
    df -h /mnt
    cat /proc/mounts

    lvresize -L +1G $dev
    resize2fs $dev
    df -h /mnt
    umount /mnt

    mount  $dev /mnt
    df -h /mnt
    umount /mnt

    vgremove -f vg
}

test_sysfs()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    find -H /sys/fs/bcachefs/ -type f -perm -0400 -exec cat {} \; > /dev/null

    umount /mnt
}

test_debugfs()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    dd if=/dev/zero of=/mnt/test1 bs=1k count=10240 oflag=direct
    dd if=/dev/zero of=/mnt/test2 bs=1k count=10240 oflag=direct

    find -H /sys/kernel/debug/bcachefs/ -type f -perm -0400 -exec cat {} \; > /dev/null

    umount /mnt
}

disabled_test_swapfile()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount -t bcachefs /dev/sdb /mnt

    fallocate -l 1G /mnt/swapfile
    mkswap  /mnt/swapfile
    swapon  /mnt/swapfile
    swapoff /mnt/swapfile

    umount /mnt
}

# migrate from other filesystems in place:

migrate_from_fs()
{
    fstype=$1

    if [[ $fstype = ext4 ]]; then
	run_quiet "" mkfs.$fstype -F /dev/sdb
	mount -o user_xattr /dev/sdb /mnt
    else
	run_quiet "" mkfs.$fstype -f /dev/sdb
	mount /dev/sdb /mnt
    fi

    cp -a /usr /mnt

    for i in /mnt/usr/bin/*; do
	ln $i ${i}-migrate2
	setfattr -n user.foo -v test $i 
    done

    bcachefs migrate				\
	--encrypted				\
	--no_passphrase				\
	-F -f /mnt | tee /root/migratelog
    offset=$(grep -oE 'sb=[[:digit:]]+' /root/migratelog|sed -e 's/sb=//')

    if true; then
	mkdir -p /mnt2
	mount -t bcachefs -o noexcl,nochanges,sb=$offset /dev/sdb /mnt2

	rsync	--archive			\
	    --acls				\
	    --xattrs				\
	    --checksum				\
	    --exclude=/bcachefs			\
	    --dry-run				\
	    --itemize-changes		 	\
	    /mnt/ /mnt2/ |tee /root/rsynclog

	umount /mnt2
	echo "rsync passed"
    fi

    umount /mnt
    fsck.$fstype -n /dev/sdb

    echo "Attempting to mount bcachefs filesystem with superblock offset"

    mount -t bcachefs -o sb=$offset /dev/sdb /mnt
    rm /mnt/old_migrated_filesystem
    umount /mnt

    echo "Creating default superblock"

    bcachefs migrate-superblock -d /dev/sdb -o $offset
    mount -t bcachefs /dev/sdb /mnt
    umount /mnt
}

test_migrate_from_ext4()
{
    migrate_from_fs ext4
}

require-kernel-config XFS_FS
test_migrate_from_xfs()
{
    migrate_from_fs xfs
}

require-kernel-config BTRFS_FS
test_migrate_from_btrfs()
{
    migrate_from_fs btrfs
}

test_migrate_from_bcachefs()
{
    migrate_from_fs bcachefs
}

# fault injection:

test_init_faults()
{
    setup_tracing 'bcachefs:*'

    run_quiet "" bcachefs format -f		\
	--errors=remount-ro			\
	/dev/sdb

    # put some data on the filesystem
    mount /dev/sdb /mnt

    run_fio_randrw
    # dbench would be better, create a directory structure
    #run_dbench

    umount /mnt

    init_fault_fn()
    {
	set_faults "$1 enable"
	# should fail:
	! mount -t bcachefs -o verbose /dev/sdb /mnt
    }

    run_fault_injection_test bcachefs:bch_fs_init   init_fault_fn
    run_fault_injection_test bcachefs:meta:read	    init_fault_fn
}

test_meta_write_faults()
{
    setup_tracing 'bcachefs:*'

    run_quiet "" bcachefs format -f		\
	--errors=remount-ro			\
	/dev/sdb

    meta_write_fault_fn()
    {
	mount /dev/sdb /mnt
	(sleep 2; set_faults "$1 enable") &

	# Should fail due to read only cache set
	! run_fio

	# XXX: verify we've gone RO
	umount /mnt
    }

    run_fault_injection_test bcachefs:meta::write meta_write_fault_fn
}

test_make_test_image()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--encrypted --no_passphrase		\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    for compress in none lz4 gzip zstd; do
	for crc in none crc32c crc64; do
	    setfattr -n bcachefs.compression -v $compress /mnt
	    setfattr -n bcachefs.data_checksum -v $crc /mnt

	    filename=/mnt/$compress-$crc
	    fio --name=write --rw=write		\
		--blocksize=1M --size=1M	\
		--buffer_compress_percentage=20	\
		--filename=$filename

	    md5sum $filename > $filename.md5sum
	done
    done

    umount /mnt
}

test_read_test_image()
{
    mount -t bcachefs /dev/sdb /mnt

    for sum in /mnt/*.md5sum; do
	f=${sum%.md5sum}

	sum1=$(md5sum $f)
	sum2=$(cat $sum)

	if [[ $sum1 = $sum2 ]]; then
	    echo $f: checksum matches
	else
	    echo $f: checksum mismatch
	    return 1
	fi
    done

    umount /mnt
}

test_long_name()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount /dev/sdb /mnt

    local i=1
    local n="1"
    while touch /mnt/$n 2> /dev/null; do
	n="1$n"
	i=$(($i + 1))
    done
    echo $i

    umount /mnt
}

test_many_files()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount /dev/sdb /mnt

    for i in {1..1000}; do
	touch /mnt/$i
    done

    umount /mnt

    mount /dev/sdb /mnt
    umount /mnt
}

disabled_test_invalid_keys()
{
    echo 1 > /sys/module/bcachefs/parameters/inject_invalid_keys

    run_quiet "" bcachefs format -f		\
	--errors=continue			\
	/dev/sdb
    mount /dev/sdb /mnt

    for i in {1..1000}; do
	touch /mnt/$i
    done

    umount /mnt

    mount -o fix_errors /dev/sdb /mnt
    umount /mnt

    echo 0 > /sys/module/bcachefs/parameters/inject_invalid_keys
}

test_fcollapse()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb
    mount /dev/sdb /mnt

    dd if=/dev/zero of=/mnt/foo bs=4k count=4 oflag=direct

    echo "before fcollapse"
    cat /sys/kernel/debug/bcachefs/*/extents
    ls -l /mnt/foo
    echo

    xfs_io -c "fcollapse 4k 2k" /mnt/foo

    echo "after fcollapse"
    cat /sys/kernel/debug/bcachefs/*/extents
    ls -l /mnt/foo
    echo

    umount /mnt
}

test_buffered_reads()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--bucket=8M				\
	--data_checksum=none			\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    dd if=/dev/zero of=/mnt/foo bs=1M oflag=direct 2>/dev/null || true

    time dd if=/mnt/foo of=/dev/null bs=1M count=1024

    umount /mnt
}

test_small_fs()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--bucket=4k				\
	--fs_size=512k				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt
    df -h /mnt

    dd if=/dev/zero of=/mnt/foo bs=4k oflag=direct 2>/dev/null || true

    df -h /mnt
    umount /mnt
}

test_small_torture()
{
    run_copygc_torture --bucket=4k --fs_size=512k
}

test_small_fsck()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--fs_size=1M				\
	/dev/sdb

    for i in {1..100}; do
	bcachefs fsck /dev/sdb
    done
}

test_gc()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--compression=lz4			\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    antagonist_trigger_gc &
    run_fio_randrw

    #dd if=/dev/zero of=/mnt/foo bs=1M count=16 oflag=direct
    #echo 1 > /sys/fs/bcachefs/*/internal/trigger_gc

    umount /mnt

    mount -t bcachefs /dev/sdb /mnt
    umount /mnt
}

test_attr_inherit()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    mkdir /mnt/foo
    mkdir /mnt/bar

    setfattr -n bcachefs.compression -v lz4 /mnt/foo
    setfattr -n bcachefs.compression -v gzip /mnt/bar

    touch /mnt/foo/baz

    getfattr -R -d -m - /mnt

    mv /mnt/foo/baz /mnt/bar/baz

    getfattr -R -d -m - /mnt

    setfattr -n bcachefs.compression -v lz4 /mnt/bar/baz
    getfattr -R -d -m - /mnt/bar/baz

    setfattr -x bcachefs.compression        /mnt/bar/baz
    getfattr -R -d -m - /mnt/bar/baz

    umount /mnt
}

test_setattr()
{
    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	/dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    mkdir /mnt/foo
    touch /mnt/foo/bar

    bcachefs setattr --compression lz4 /mnt/foo
    getfattr -R -d -m - /mnt

    umount /mnt
}

test_mount_twice()
{
    mkdir -p /mnt/1 /mnt/2
    #run_quiet "" bcachefs format -f /dev/sdb
    mkfs.ext2 /dev/sdb
    mount /dev/sdb /mnt/1
    mount /dev/sdb /mnt/2
    exit

    umount /mnt/1
    umount /mnt/2
}

test_dump()
{
    run_quiet "" bcachefs format /dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    touch /mnt/a
    touch /mnt/b
    umount /mnt
    bcachefs dump -o /tmp/sdb.qcow2 /dev/sdb
}

test_counters()
{
    run_quiet "" bcachefs format /dev/sdb

    mount -t bcachefs /dev/sdb /mnt

    # io_write
    dd if=/dev/urandom bs=1M count=100 oflag=direct of=/mnt/test
    # io_read
    dd if=/mnt/test iflag=direct bs=1M count=50 of=/dev/null

    FILES=/sys/fs/bcachefs/*/counters/*

    I=0
    # All these files should have contents
    for F in $FILES
    do
        I=$(($I+1))
        [ -s $F ]
    done

    tail -n 1 /sys/fs/bcachefs/*/counters/* > counters1

    umount /mnt

    bcachefs show-super -f counters /dev/sdb | tail -n $(($I+1))

    mount -t bcachefs /dev/sdb /mnt

    tail -n 1 /sys/fs/bcachefs/*/counters/* > counters2

    diff counters1 counters2

    tail -n +1 $FILES
}
